
type Account @entity {
  id: ID! #<accountAddress>
  address: Bytes!
  balances: [AccountBalance!]! @derivedFrom(field: "account")
  delegate: Delegate
  inTransfers: [TransferEvent!]! @derivedFrom(field: "destination")
  outTransfers: [TransferEvent!]! @derivedFrom(field: "sender")
  approvals: [ApprovalEvent!]! @derivedFrom(field: "owner")
  mintsReceived: [MintEvent!]! @derivedFrom(field: "destination")
  burns: [BurnEvent!]! @derivedFrom(field: "sender")
  pEVRTStake: [Enter!]! @derivedFrom(field: "account")
  pEVRTUnstake: [Leave!]! @derivedFrom(field: "account")
  pEVRTDailyReward: [DailyRewardReceived!]! @derivedFrom(field: "account")
  poolStake: [Staked!]! @derivedFrom(field: "user")
  poolWithdrawal: [Withdrawn!]! @derivedFrom(field: "user")
  poolReward: [RewardPaid!]! @derivedFrom(field: "user")
}

type AccountBalance @entity {
  id: ID! #<accountAddress>-<tokenAddress>
  account: Account! #<account address>
  token: Token! #<token address>
  amount: BigDecimal! #<current account balance>
  block: BigInt #<Block number in which the balance was last modified>
  modified: BigInt #<Last modified timestamp in seconds>
  transaction: Bytes #<Hash of the last transaction that modified the balance>
}

type AccountBalanceSnapshot @entity {
  id: ID! #<accountAddress>-<tokenAddress>
  account: Account! #<account address>
  token: Token! #<token address>
  amount: BigDecimal! #<current account balance>
  event: TokenEvent
  block: BigInt #<Block number in which the balance was last modified>
  modified: BigInt #<Last modified timestamp in seconds>
  transaction: Bytes #<Hash of the last transaction that modified the balance>
  timestamp: BigInt! #<Timestamp in seconds>
}

type Token @entity {
  id: ID!
  address: Bytes! #<Token address>
  decimals: Int! #<Number of decimals the token uses>
  name: String! #<Human-readable name of the token>
  symbol: String! #<Symbol of the token>
  eventCount: BigInt! #<Total number of events (all types)>
  mintEventCount: BigInt! #<Total number of mint events>
  burnEventCount: BigInt! #<Total number of burn events>
  transferEventCount: BigInt! #<Total number of transfer events>
  totalSupply: BigDecimal! #<Total token supply>
  totalMinted: BigDecimal! #<Total token minted>
  totalBurned: BigDecimal! #<Total token burned>
  totalTransferred: BigDecimal!  #<Total token transferred>
  events: [TokenEvent!]! @derivedFrom(field: "token")  #<List token events>
}

interface TokenEvent {
  id: ID!
  token: Token!
  amount: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type TransferEvent implements TokenEvent @entity {
  id: ID!
  token: Token! #<Token address>
  amount: BigDecimal! #<Quantity of tokens transferred>
  sender: Account! #<Transaction sender address>
  source: Bytes! #<Address of source account>
  destination: Account! #<Address of destination account>
  block: BigInt! #<Block number>
  timestamp: BigInt! #<Event timestamp>
  transaction: Bytes! #<Transaction hash>
}


type ApprovalEvent @entity {
  id: ID!
  owner: Account! #<>
  spender: Account! #<>
  amount: BigDecimal! #<>
  timestamp: BigInt! #<>
  transaction: Bytes! #<>
}

type MintEvent implements TokenEvent @entity {
  id: ID!
  token: Token! #<Token address>
  amount: BigDecimal! #<Quantity of tokens minted>
  sender: Bytes! #<Transaction sender address>
  minter: Bytes! #<Address of minter account>
  destination: Account! #<Address of destination account>
  block: BigInt! #<Block number>
  timestamp: BigInt! #<Event timestamp>
  transaction: Bytes! #<Transaction hash>
}

type BurnEvent implements TokenEvent @entity {
  id: ID!
  token: Token! #<Token address>
  amount: BigDecimal! #<Quantity of tokens minted>
  sender: Account! #<Transaction sender address>
  burner: Bytes! #<Address of minter account>
  block: BigInt! #<Block number>
  timestamp: BigInt! #<Event timestamp>
  transaction: Bytes! #<Transaction hash>
}

type Delegate @entity{
  id: ID!
  address: Bytes!
  delegator: Account
  vote: DelegateVote
  timestamp: BigInt!
  transaction: Bytes! #<Transaction hash>
}

type DelegateVote @entity {
  id: ID! #<delegateAddress>-<previousVoteBalance>-<newVotebalance>
  delegate: Delegate!
  newVoteBalance: BigInt!
  previousVoteBalance: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type DelegateChange @entity {
  id: ID! #<currentDelegate> - <newDelegate>
  delegator: Account!
  currentDelegate: Account!
  newDelegate: Account!
  timestamp: BigInt!
  transaction: Bytes!
}

type DailyRewardReceived @entity {
  id: ID! #<transaction hash>
  account: Account! 
  amount: BigDecimal!
  timestamp: BigInt!
  transaction: Bytes!
}

type Enter @entity {
  id: ID! #<transaction hash>
  account: Account!
  vault: Vault!
  amount: BigDecimal!
  timestamp: BigInt!
  transaction: Bytes!
}

type Vault @entity {
  id: ID!
  address: Bytes!
  balance: BigDecimal!
}

type Leave @entity {
  id: ID! #<transaction hash>
  account: Account!
  vault: Vault!
  amount: BigDecimal!
  shares: BigDecimal!
  timestamp: BigInt!
  transaction: Bytes!
}

type Recovered @entity {
  id: ID!
  token: Token!
  amount: BigDecimal!
  timestamp: BigInt!
  transaction: Bytes!
}

type Pool @entity {
  id: ID!
  address: Bytes!
  rewardTokenAddress: Bytes!
  stakeTokenAddress: Bytes!
  rewardToken: Token!
  stakeToken: Token!
  pairToken: PairToken
  totalStaked: BigDecimal!
  totalWithdrawn: BigDecimal!
  totalRewardAdded: BigDecimal!
  totalRewardPaid: BigDecimal!
}

type PairToken @entity {
  id: ID!
  address: Bytes!
  poolAddress: Bytes!
  pool: Pool!
  token0Address: Bytes!
  token1Address: Bytes!
  token0: Token!
  token1: Token!
  token0Price: BigDecimal
  token1Price: BigDecimal
  token0Locked: BigDecimal!
  token1Locked: BigDecimal!
  totalLiquidityInAVAX: BigDecimal!
}

type AccountLiquidity @entity {
  id: ID! # {poolAddress}{accoutnAddress}
  pool: Pool!
  account: Account!
  balance: BigDecimal!
}

type RewardAdded @entity {
  id: ID!
  reward: BigDecimal!
  rewardToken: Token!
  timestamp: BigInt!
  transaction: Bytes!
}

type RewardPaid @entity {
  id: ID!
  user: Account!
  reward: BigDecimal!
  rewardtoken: Token!
  timestamp: BigInt!
  transaction: Bytes!
}

type RewardsDurationUpdated @entity {
  id: ID!
  newDuration: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type Staked @entity {
  id: ID!
  user: Account!
  amount: BigDecimal!
  stakedToken: Token!
  timestamp: BigInt!
  transaction: Bytes!
}

type Withdrawn @entity {
  id: ID!
  user: Account!
  amount: BigDecimal!
  withdrawnToken: Token!
  timestamp: BigInt!
  transaction: Bytes!
}




